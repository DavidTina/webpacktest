{"version":3,"sources":["logo.svg","components/AsyncComponent.js","components/Tacos.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","asyncComponent","importComponent","props","state","component","default","this","setState","C","Component","RouteWithSubRoutes","route","path","render","routes","AsyncBus","AsyncCart","to","map","i","key","RouteConfigExample","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,4LCE5B,SAASC,EAAeC,GAyBnC,OAzBoD,kDAEhD,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,UAAW,MAJA,EAF6B,kMAWTH,IAXS,gBAW5BG,EAX4B,EAWrCC,QAEPC,KAAKC,SAAS,CACVH,UAAWA,IAd6B,qIAmB5C,IAAMI,EAAIF,KAAKH,MAAMC,UAErB,OAAOI,EAAI,kBAACA,EAAMF,KAAKJ,OAAY,SArBS,GACvBO,aCC1B,SAASC,EAAmBC,GAC/B,OACI,kBAAC,IAAD,CACIC,KAAMD,EAAMC,KACZC,OAAQ,SAAAX,GAAK,OAET,kBAACS,EAAMP,UAAP,iBAAqBF,EAArB,CAA4BY,OAAQH,EAAMG,aCE1D,IAAMC,EAAWf,GAAe,kBAAM,gCAChCgB,EAAYhB,GAAe,kBAAM,gCAUjCc,EAAS,CACX,CACIF,KAAM,cACNR,UAZgBJ,GAAe,kBAAM,iCAczC,CACIY,KAAM,SACNR,UDZD,YAA0B,IAAVU,EAAS,EAATA,OACnB,OACI,6BACI,qCACA,4BACI,4BACI,kBAAC,IAAD,CAAMG,GAAG,cAAT,QAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,eAAT,UAIR,kBAAC,IAAD,KACKH,EAAOI,KAAI,SAACP,EAAOQ,GAAR,OACR,kBAACT,EAAD,eAAoBU,IAAKD,GAAOR,UCF5CG,OAAQ,CACJ,CACIF,KAAM,aACNR,UAAWW,GAEf,CACIH,KAAM,cACNR,UAAWY,MAkCZK,MA5Bf,WACI,OACI,kBAAC,IAAD,KACI,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMJ,GAAG,UAAT,UAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,eAAT,gBAIR,kBAAC,IAAD,KACKH,EAAOI,KAAI,SAACP,EAAOQ,GAAR,OACR,kBAACT,EAAD,eAAoBU,IAAKD,GAAOR,WC/CpCW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASd,OACP,kBAAC,IAAMe,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4c3db377.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\n\nexport default function asyncComponent(importComponent) {\n    class AsyncComponent extends Component {\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                component: null\n            };\n        }\n\n        async componentDidMount() {\n            const {default: component} = await importComponent();\n\n            this.setState({\n                component: component\n            });\n        }\n\n        render() {\n            const C = this.state.component;\n\n            return C ? <C {...this.props} /> : null;\n        }\n    }\n\n    return AsyncComponent;\n}","import React from \"react\";\nimport {Route, Switch} from \"react-router\";\nimport {Link} from \"react-router-dom\";\n\nexport function RouteWithSubRoutes(route) {\n    return (\n        <Route\n            path={route.path}\n            render={props => (\n                // pass the sub-routes down to keep nesting\n                <route.component {...props} routes={route.routes}/>\n            )}\n        />\n    );\n}\n\n\n\nexport function Tacos({routes}) {\n    return (\n        <div>\n            <h2>Tacos</h2>\n            <ul>\n                <li>\n                    <Link to=\"/tacos/bus\">Bus</Link>\n                </li>\n                <li>\n                    <Link to=\"/tacos/cart\">Cart</Link>\n                </li>\n            </ul>\n\n            <Switch>\n                {routes.map((route, i) => (\n                    <RouteWithSubRoutes key={i} {...route} />\n                ))}\n            </Switch>\n        </div>\n    );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport asyncComponent from \"./components/AsyncComponent\";\nimport {RouteWithSubRoutes, Tacos} from \"./components/Tacos\";\n\nconst AsyncBus = asyncComponent(() => import(\"./components/Bus\"));\nconst AsyncCart = asyncComponent(() => import(\"./components/Cart\"));\nconst AsyncSandwiches = asyncComponent(() => import(\"./components/Sandwiches\"));\n\n// Some folks find value in a centralized route config.\n// A route config is just data. React is great at mapping\n// data into components, and <Route> is a component.\n\n// Our route config is just an array of logical \"routes\"\n// with `path` and `component` props, ordered the same\n// way you'd do inside a `<Switch>`.\nconst routes = [\n    {\n        path: \"/sandwiches\",\n        component: AsyncSandwiches\n    },\n    {\n        path: \"/tacos\",\n        component: Tacos,\n        routes: [\n            {\n                path: \"/tacos/bus\",\n                component: AsyncBus\n            },\n            {\n                path: \"/tacos/cart\",\n                component: AsyncCart\n            }\n        ]\n    }\n];\n\nfunction RouteConfigExample() {\n    return (\n        <Router>\n            <div>\n                <ul>\n                    <li>\n                        <Link to=\"/tacos\">Tacos</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/sandwiches\">Sandwiches</Link>\n                    </li>\n                </ul>\n\n                <Switch>\n                    {routes.map((route, i) => (\n                        <RouteWithSubRoutes key={i} {...route} />\n                    ))}\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\n// A special wrapper for <Route> that knows how to\n// handle \"sub\"-routes by passing them in a `routes`\n// prop to the component it renders.\n\n\nexport default RouteConfigExample;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}